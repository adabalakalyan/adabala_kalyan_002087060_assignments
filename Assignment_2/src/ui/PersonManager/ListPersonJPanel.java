/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.PersonManager;

import java.awt.CardLayout;

import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.Person;
import model.PersonDirectory;

/**
 *
 * @author nanik
 */
public class ListPersonJPanel extends javax.swing.JPanel {
    
        private JPanel userProcessContainer;
    private PersonDirectory personDirectory;

    /**
     * Creates new form ListPersonJPanel
     */
    public ListPersonJPanel(JPanel userProcessContainer, PersonDirectory personDirectory) {
        initComponents();
        
                this.userProcessContainer = userProcessContainer;
        this.personDirectory = personDirectory;

        // Populate the table with persons from the personDirectory
        populateTable();
    }

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblPersons.getModel();
        model.setRowCount(0); // Clear existing data

        for (Person person : personDirectory.getPersonList()) {
            Object[] row = new Object[6];
            row[0] = person.getFirstName();
            row[1] = person.getLastName();
            row[2] = person.getHomeAddress().getCity();
            row[3] = person.getHomeAddress().getZipCode();
            row[4] = person.getWorkAddress().getCity();
            row[5] = person.getWorkAddress().getZipCode();
            model.addRow(row);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPersons = new javax.swing.JTable();
        btnDelete = new javax.swing.JButton();

        btnBack.setText("<<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        tblPersons.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "First Name", "Last Name", "Home City", "Home Zip", "Office City", "Office Zip"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPersons);

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 693, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnBack)
                            .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBack)
                .addGap(61, 61, 61)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(btnDelete)
                .addContainerGap(213, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
    userProcessContainer.removeAll();
    userProcessContainer.repaint();
    userProcessContainer.revalidate();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
// Get the selected row index
    int selectedRow = tblPersons.getSelectedRow();
    
    // Check if no row is selected
    if (selectedRow < 0) {
        JOptionPane.showMessageDialog(null, "Please select a row to delete.", "Warning", JOptionPane.WARNING_MESSAGE);
        return;
    }
    
    // Get the person details from the selected row
    DefaultTableModel model = (DefaultTableModel) tblPersons.getModel();
    String firstName = (String) model.getValueAt(selectedRow, 0);  // Column 0 for First Name
    String lastName = (String) model.getValueAt(selectedRow, 1);   // Column 1 for Last Name
    
    // Find the person in the personDirectory
    Person personToDelete = null;
    for (Person person : personDirectory.getPersonList()) {
        if (person.getFirstName().equals(firstName) && person.getLastName().equals(lastName)) {
            personToDelete = person;
            break;
        }
    }
    
    // If the person was found, delete them from the directory
    if (personToDelete != null) {
        personDirectory.deletePerson(personToDelete);  // Delete the person
        JOptionPane.showMessageDialog(null, "Person deleted successfully.");
    } else {
        JOptionPane.showMessageDialog(null, "Person not found.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    // Update the table to reflect the deletion
    populateTable();
    
    }//GEN-LAST:event_btnDeleteActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPersons;
    // End of variables declaration//GEN-END:variables
}
